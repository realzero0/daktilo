---
layout: post
title:  "[Boost_Camp] BE FE 코드리뷰"
subtitle: "4주차"
date:   2017-07-25 20:40:00
categories: [study]
---

# BE #

환경에 따른 파일 설정

패스워드 설정

서비스나 DAO에 리퀘스트를 넣는 것은 매우 좋지 않음

properties를 빼는 것을 유동적인 부분에 대해서 해야함 값을 바로 집어 넣는 것은 좋지 않음


# FE #

## 모듈 vs 컴포넌트 ##

모듈? 서로 구분되고, 서로 관련되어 있는 부분들의 집합

몇 개의 상수, 인스턴스, 클래스들의 모음이라는 의미임

npm에서 설치하는 모듈들도 하나의 모듈임

모듈은 일반적으로 배포를 염두에 두고 있는 단위


## 컴포넌트? ##

주로 뷰의 구성요소를 말할 때, 뷰의 일부 요소

뷰 -> MVC에서의 view는 모델을 표현하는 것임 -> 모델을 떠나서는 의미가 없음

뮤직관련 뷰를 만들고 앨범에 관한 뷰를 보여준다고 치자

우리는 거기에 다양한 데이터를 넣고 그 뷰를 보여줄 것이다.

그 뷰에 여러가지 인풋으로 별점을 바꾸거나, 음량을 조절하거나, 다음 앨범으로 옮겨 갈 것이다.

그런면에서 컴포넌트는 기능적으로 UI에 한 부품이 되는 부분을 의미한다.

스피너, 달력 컴포넌트 등을 UI 컴포넌트라고 한다.


## Observer 패턴 ##

의존성을 줄이지만, 의존성 문제를 줄이기 위해 Observer 패턴을 쓰면 안된다.

플레이어 컴포넌트에서, 플레이버튼을 눌러서 플레이가 시작되면,

감춰져 있는 가사를 보여주려고 한다. 그러기 위해서는 플레이되는 시점을 아는 것이 필요하다.

가사는 플레이어를 의존하는 편이 훨씬 낫다. 그 반대의 경우보다.

플레이어의 플레이 버튼이 눌러질 때 가사가 열려야 한다.

```
Player player = new Player();
//아래와 같은 코드는 의존성을 증가시킴
player.setLylicViewer(new LylicViewer());

//의존관계가 현저히 줄어듬
player.on("play");


//아래와 같은 코드는 의존관계가 명백히 드러남, 결국 의존관계인 것임
player.on("showLylic");
```

